---
## This YAML is the source of truth on how questions are grouped into
## categories and how they are executed (on which snapshots and with which
## parameters).
categories:
  - name: configProperties
    description: Configuration Properties
    introduction: |
      This category of questions enables you to retrieve and process the
      contents of device configurations in a vendor-agnostic manner
      (except where the question itself is vendor-specific). Batfish organizes
      configuration content into several sub-categories.
    questions:
      - name: Node Properties
        pybf_name: nodeProperties
      - name: Interface Properties
        pybf_name: interfaceProperties
      - name: BGP Process Configuration
        pybf_name: bgpProcessConfiguration
      - name: BGP Peer Configuration
        pybf_name: bgpPeerConfiguration
      - name: HSRP Properties
        pybf_name: hsrpProperties
        snapshot:
          name: ios_basic_hsrp
          path: networks/ios_basic_hsrp
      - name: OSPF Process Configuration
        pybf_name: ospfProcessConfiguration
      - name: OSPF Interface Configuration
        pybf_name: ospfInterfaceConfiguration
      - name: OSPF Area Configuration
        pybf_name: ospfAreaConfiguration
      - name: Multi-chassis LAG
        pybf_name: mlagProperties
        snapshot:
          name: aristaevpn
          path: networks/aristaevpn
      - name: IP Owners
        pybf_name: ipOwners
      - name: Named Structures
        pybf_name: namedStructures
      - name: Defined Structures
        pybf_name: definedStructures
      - name: Referenced Structures
        pybf_name: referencedStructures
      - name: Undefined References
        pybf_name: undefinedReferences
      - name: Unused Structures
        pybf_name: unusedStructures
      - name: VLAN Properties
        pybf_name: switchedVlanProperties
        snapshot:
          name: aristaevpn
          path: networks/aristaevpn
      - name: VRRP Properties
        pybf_name: vrrpProperties
        snapshot:
          name: ios_basic_vrrp
          path: networks/ios_basic_vrrp
      - name: A10 Virtual Server Configuration
        pybf_name: a10VirtualServerConfiguration
        snapshot:
          name: a10
          path: networks/a10
      - name: F5 BIG-IP VIP Configuration
        pybf_name: f5BigipVipConfiguration
        snapshot:
          name: f5
          path: networks/f5
#      - name: Interface MTU
#        pybf_name: interfaceMtu
#        parameters:
#          - name: mtuBytes
#            value: 2000
#          - name: comparator
#            value: "'<'"
  - name: topology
    description: Topology
    introduction: |
      This caterogy of questions is intended to retrieve the network topology
      used by Batfish. This topology is a combination of information in the
      snapshot and inference logic (e.g., which interfaces are layer3 neighbors).
      Currently, Layer 3 topology can be retrieved.
    questions:
      - name: User Provided Layer 1 Topology
        pybf_name: userProvidedLayer1Edges
        snapshot:
          name: aristaevpn
          path: networks/aristaevpn
      - name: Layer 3 Topology
        pybf_name: layer3Edges
  - name: routingProtocols
    description: Routing Protocol Sessions and Policies
    introduction: |
      This category of questions reveals information regarding which routing
      protocol sessions  are compatibly configured and which ones are
      established. It also allows to you analyze BGP routing policies.
    questions:
    - name: BGP Session Compatibility
      pybf_name: bgpSessionCompatibility
    - name: BGP Session Status
      pybf_name: bgpSessionStatus
    - name: BGP Edges
      pybf_name: bgpEdges
    - name: OSPF Session Compatibility
      pybf_name: ospfSessionCompatibility
    - name: OSPF Edges
      pybf_name: ospfEdges
#    - name: ISIS Edges
#      pybf_name: isisEdges
#    - name: EIGRP Edges
#      pybf_name: eigrpEdges
    - name: Test Route Policies
      pybf_name: testRoutePolicies
      parameters:
        - name: policies
          value: "'/as1_to_/'"
        - name: direction
          value: "'in'"
        - name: inputRoutes
          value: list([BgpRoute(network='10.0.0.0/24', originatorIp='4.4.4.4', originType='egp', protocol='bgp', asPath=[[64512, 64513], [64514]], communities=['64512:42', '64513:21'])])
    - name: Search Route Policies
      pybf_name: searchRoutePolicies
      parameters:
        - name: nodes
          value: "'/^as1/'"
        - name: policies
          value: "'/as1_to_/'"
        - name: inputConstraints
          value: BgpRouteConstraints(prefix=["10.0.0.0/8:8-32", "172.16.0.0/28:28-32", "192.168.0.0/16:16-32"])
        - name: action
          value: "'permit'"
  - name: routingTables
    description: Routing and Forwarding Tables
    introduction: |
      This category of questions allows you to query the RIBs and FIBs computed
      by Batfish.
    questions:
    - name: Routes
      pybf_name: routes
    - name: BGP RIB
      pybf_name: bgpRib
    - name: EVPN RIB
      pybf_name: evpnRib
      snapshot:
        name: aristaevpn
        path: networks/aristaevpn
    - name: Longest Prefix Match
      pybf_name: lpmRoutes
      parameters:
        - name: ip
          value: "'2.34.201.10'"
#    - name: Prefix Tracer
#      pybf_name: prefixTracer
#      parameters:
#        - name: prefix
#          value: "'2.34.201.0/24'"
  - name: forwarding
    description: Packet Forwarding
    introduction: |
      This category of questions allows you to query how different types of
      traffic is forwarded by the network and if endpoints are able to
      communicate. You can analyze these aspects in a few different ways.
    questions:
    - name: Traceroute
      pybf_name: traceroute
      parameters:
        - name: startLocation
          value: "'@enter(as2border1[GigabitEthernet2/0])'"
        - name: headers
          value: HeaderConstraints(dstIps='2.34.201.10', srcIps='8.8.8.8')
      type: singleflow
    - name: Bi-directional Traceroute
      pybf_name: bidirectionalTraceroute
      parameters:
        - name: startLocation
          value: "'@enter(as2border1[GigabitEthernet2/0])'"
        - name: headers
          value: HeaderConstraints(dstIps='2.34.201.10', srcIps='8.8.8.8')
      type: dualflow
    - name: Reachability
      pybf_name: reachability
      parameters:
        - name: pathConstraints
          value: PathConstraints(startLocation = '/as2/')
        - name: headers
          value: HeaderConstraints(dstIps='host1', srcIps='0.0.0.0/0', applications='DNS')
        - name: actions
          value: "'SUCCESS'"
      type: singleflow
    - name: Bi-directional Reachability
      pybf_name: bidirectionalReachability
      parameters:
        - name: pathConstraints
          value: PathConstraints(startLocation = '/as2dist1/')
        - name: headers
          value: HeaderConstraints(dstIps='host1', srcIps='0.0.0.0/0', applications='DNS')
        - name: returnFlowType
          value: "'SUCCESS'"
      type: dualflow
    - name: Loop detection
      pybf_name: detectLoops
      type: no-result
    - name: Multipath Consistency for host-subnets
      pybf_name: subnetMultipathConsistency
      type: singleflow
    - name: Multipath Consistency for router loopbacks
      pybf_name: loopbackMultipathConsistency
      type: singleflow
  - name: filters
    description: Access-lists and firewall rules
    introduction: |
      This category of questions allows you to analyze the behavior of access
      control lists and firewall rules. It also allows you to comprehensively
      validate (aka verification) that some traffic is or is not allowed.
    questions:
    - name: Filter Line Reachability
      pybf_name: filterLineReachability
    - name: Search Filters
      pybf_name: searchFilters
      parameters:
        - name: headers
          value: HeaderConstraints(srcIps='10.10.10.0/24', dstIps='218.8.104.58', applications = ['dns'])
        - name: action
          value: "'deny'"
        - name: filters
          value: "'acl_in'"
      snapshot:
        name: filters
        path: networks/example-filters/current
      type: basic
    - name: Test Filters
      pybf_name: testFilters
      parameters:
        - name: headers
          value: HeaderConstraints(srcIps='10.10.10.1', dstIps='218.8.104.58', applications = ['dns'])
        - name: nodes
          value: "'rtr-with-acl'"
        - name: filters
          value: "'acl_in'"
      snapshot:
        name: filters
        path: networks/example-filters/current
      type: basic
    - name: Find Matching Filter Lines
      pybf_name: findMatchingFilterLines
      parameters:
        - name: headers
          value: HeaderConstraints(applications='DNS')
  - name: ipsec
    description: IPSec Tunnels
    introduction: |
      This category of questions allows you to query IPSec sessions and tunnels.
    questions:
    - name: IPSec Session Status
      pybf_name: ipsecSessionStatus
      snapshot:
        name: hybridcloud
        path: networks/hybrid-cloud
    - name: IPSec Edges
      pybf_name: ipsecEdges
      snapshot:
        name: hybridcloud
        path: networks/hybrid-cloud
  - name: vxlan_evpn
    description: VXLAN and EVPN
    introduction: |
      This category of questions allows you to query aspects of VXLAN and EVPN
      configuration and behavior.
    questions:
    - name: VXLAN VNI Properties
      pybf_name: vxlanVniProperties
      snapshot:
        name: aristaevpn
        path: networks/aristaevpn
    - name: VXLAN Edges
      pybf_name: vxlanEdges
      snapshot:
        name: aristaevpn
        path: networks/aristaevpn
    - name: L3 EVPN VNIs
      pybf_name: evpnL3VniProperties
      snapshot:
        name: aristaevpn
        path: networks/aristaevpn
  - name: snapshot
    description: Snapshot Input
    introduction: |
      This category of questions allows you to learn how well Batfish
      understands your network snapshot.
    questions:
    - name: Snapshot Initialization Issues
      pybf_name: initIssues
    - name: Snapshot Input File Parse Status
      pybf_name: fileParseStatus
    - name: Snapshot Input File Parse Warnings
      pybf_name: parseWarning
      type: no-result
  - name: resolvingSpecifiers
    description: Resolving Specifiers
    introduction: |
      Specifier grammars allow you to specify complex inputs for Batfish questions.
      This category of questions reveals how specifier inputs are resolved
      by Batfish.
    questions:
      - name: Resolve Location Specifier
        pybf_name: resolveLocationSpecifier
        type: basic
        parameters:
          - name: locations
            value: "'@enter(as2border1[GigabitEthernet2/0])'"
      - name: Resolve Filter Specifier
        pybf_name: resolveFilterSpecifier
        type: basic
        parameters:
          - name: filters
            value: "'@in(as2border1[GigabitEthernet0/0])'"
      - name: Resolve Node Specifier
        pybf_name: resolveNodeSpecifier
        type: basic
        parameters:
          - name: nodes
            value: "'/border/'"
      - name: Resolve Interface Specifier
        pybf_name: resolveInterfaceSpecifier
        type: basic
        parameters:
          - name: interfaces
            value: "'/border/[.*Ethernet]'"
      - name: Resolve IPs from Location Specifier
        pybf_name: resolveIpsOfLocationSpecifier
        type: basic
        parameters:
          - name: locations
            value: "'@enter(as2border1[GigabitEthernet2/0])'"
      - name: Resolve IP Specifier
        pybf_name: resolveIpSpecifier
        type: basic
        parameters:
          - name: ips
            value: "'/border/[.*Ethernet]'"
  - name: differentialQuestions
    description: Differential Questions
    introduction: |
      Differential questions enable you to discover configuration and
      behavior differences between two snapshot of the network.

      Most of the Batfish questions can be run differentially by using
      `snapshot=<current snapshot>` and `reference_snapshot=<reference snapshot>`
      parameters in `.answer()`. For example, to view routing
      table differences between `snapshot1` and `snapshot0`, run
      `bf.q.routes().answer(snapshot="snapshot1", reference_snapshot="snapshot0")`.

      Batfish also has two questions that are exclusively differential.
    questions:
      - name: Compare Filters
        pybf_name: compareFilters
        type: diff
        parameters:
          - name: nodes
            value: "'rtr-with-acl'"
        reference_snapshot:
          name: filters
          path: networks/example-filters/current
        snapshot:
          name: filters-change
          path: networks/example-filters/candidate1
      - name: Differential Reachability
        pybf_name: differentialReachability
        type: diff
        reference_snapshot:
          name: forwarding
          path: networks/forwarding-change-validation/base
        snapshot:
          name: forwarding-change
          path: networks/forwarding-change-validation/change1
#      - name: Differential Routes
#        pybf_name: routes
#        reference_snapshot:
#          name: forwarding
#          path: networks/forwarding-change-validation/base
#        snapshot:
#          name: forwarding-change
#          path: networks/forwarding-change-validation/change1
