.. py:module:: pybatfish.question.bfq

.. py:class:: aaaAuthenticationLogin(*, nodes, question_name, exclusions)

   Return nodes that do not require authentication on all lines.
   
   
   :param nodes: *Required.* Examine AAA Authentication on nodes matching this name or regex.
   
       Default value: ``.*``
   :type nodes: nodeSpec

.. py:class:: bgpPeerConfiguration(*, nodes, properties, question_name, exclusions)

   Return BGP peer configuration properties.
   
   
   :param nodes: Include nodes matching this name or regex.
   :type nodes: nodeSpec
   :param properties: Include properties matching this regex.
   :type properties: bgpPeerPropertySpec

.. py:class:: bgpProcessConfiguration(*, nodes, properties, question_name, exclusions)

   Return BGP process configuration properties.
   
   
   :param nodes: Include nodes matching this name or regex.
   :type nodes: nodeSpec
   :param properties: Include properties matching this regex.
   :type properties: bgpProcessPropertySpec

.. py:class:: bgpSessionCompatibility(*, nodes, remoteNodes, status, type, question_name, exclusions)

   Return the status of configured BGP sessions, independent of remote peer configurations.
   
   
   :param nodes: Include sessions whose first node matches this name or regex.
   :type nodes: nodeSpec
   :param remoteNodes: Include sessions whose second node matches this name or regex.
   :type remoteNodes: nodeSpec
   :param status: Only include sessions for which status matches this regex.
   :type status: javaRegex
   :param type: Only include sessions for which type (ibgp, ebgp_singlehop, ebgp_multihop) matches this regex.
   :type type: javaRegex

.. py:class:: bgpSessionStatus(*, nodes, remoteNodes, status, type, question_name, exclusions)

   Return the status of configured BGP sessions.
   
   
   :param nodes: Include sessions whose first node matches this name or regex.
   :type nodes: nodeSpec
   :param remoteNodes: Include sessions whose second node matches this name or regex.
   :type remoteNodes: nodeSpec
   :param status: Only include sessions for which status matches this regex.
   :type status: javaRegex
   :param type: Only include sessions for which type (ibgp, ebgp_singlehop, ebgp_multihop) matches this regex.
   :type type: javaRegex

.. py:class:: definedStructures(*, names, nodes, types, question_name, exclusions)

   Lists the structures defined in the network.
   
   Lists the structures defined in the network, along with the files and line numbers in which they are defined.
   
   
   :param names: Include structures whose name matches this string or regex.
   
       Default value: ``.*``
   :type names: javaRegex
   :param nodes: Include files used to generate nodes whose name matches this name or regex.
   
       Default value: ``.*``
   :type nodes: nodeSpec
   :param types: Include structures whose vendor-specific type matches this string or regex.
   
       Default value: ``.*``
   :type types: javaRegex

.. py:class:: detectLoops(*, maxTraces, question_name, exclusions)

   Detect forwarding loops.
   
   Finds forwarding loops.
   
   
   :param maxTraces: Limit the number of traces returned.
   :type maxTraces: integer

.. py:class:: differentialReachability(*, actions, headers, ignoreFilters, invertSearch, maxTraces, pathConstraints, question_name, exclusions)

   Detect differential reachability.
   
   Finds flows that are accepted in one snapshot but dropped in another.
   
   
   :param actions: Only return flows for which the disposition is from this set.
   
       Default value: ``success``
   :type actions: dispositionSpec
   :param headers: Packet header constraints.
   :type headers: headerConstraint
   :param ignoreFilters: Do not apply filters/ACLs during analysis.
   :type ignoreFilters: boolean
   :param invertSearch: Search for packet headers outside the specified headerspace, rather than inside the space.
   :type invertSearch: boolean
   :param maxTraces: Limit the number of traces returned.
   :type maxTraces: integer
   :param pathConstraints: Constraint the path a flow can take (start/end/transit locations).
   :type pathConstraints: pathConstraint

.. py:class:: edges(*, edgeType, nodes, remoteNodes, question_name, exclusions)

   Lists different types of edges in a snapshot.
   
   Lists neighbor relationships of the specified type (layer3, BGP, ospf, etc. in the form of edges).
   
   
   :param nodes: *Required.* Include edges whose first node matches this name or regex.
   
       Default value: ``.*``
   :type nodes: nodeSpec
   :param remoteNodes: *Required.* Include edges whose second node matches this name or regex.
   
       Default value: ``.*``
   :type remoteNodes: nodeSpec
   :param edgeType: Types of edges to include.
       Allowed values:
   
       * bgp
       * eigrp
       * isis
       * layer1
       * layer2
       * layer3
       * ospf
       * rip
   :type edgeType: string

.. py:class:: fileParseStatus(*, question_name, exclusions)

   Display file parse status.
   
   For each file in a snapshot, returns the host(s) that were produced by the file and the parse status: pass, fail, partially parsed.

.. py:class:: filterLineReachability(*, filters, nodes, question_name, exclusions)

   Identify ACLs/filters with unreachable lines.
   
   This question finds all unreachable lines in the specified ACLs/filters.
   
   
   :param filters: Name or regex identifying the filters to test.
   :type filters: string
   :param nodes: Examine filters on nodes matching this name or regex.
   :type nodes: nodeSpec

.. py:class:: filterTable(*, columns, filter, innerQuestion, question_name, exclusions)

   Return subset of answer for a question.
   
   Return a subset of the answer generated by the inner question. The results are trimmed first by row and then by column. Rows where any value matches the filter are returned. The columns returned for each row is restricted by the column specifier.
   
   
   :param innerQuestion: *Required.* The inner question whose answer should be filtered.
   :type innerQuestion: question
   :param columns: The set of columns to fetch.
   :type columns: string
   :param filter: The filter to use.
   :type filter: string

.. py:class:: interfaceMtu(*, comparator, interfaces, mtuBytes, nodes, question_name, exclusions)

   Find interfaces where the configured MTU matches the specified comparator and mtuBytes.
   
   For example, if comparator is '<' and mtuBytes is 1500, then only interfaces where the configured MTU is less than 1500 bytes will be returned.
   
   
   :param interfaces: *Required.* Evaluate interfaces matching this regex.
   
       Default value: ``.*``
   :type interfaces: javaRegex
   :param mtuBytes: *Required.* The reference MTU in bytes against which to check the configured MTU.
   
       Default value: ``1500``
   :type mtuBytes: integer
   :param nodes: *Required.* Include nodes matching this name or regex.
   
       Default value: ``.*``
   :type nodes: nodeSpec
   :param comparator: Returned devices will satisfy <comparator> <mtuBytes>. Use '<' to find devices that do not have MTU smaller than the specified <mtuBytes> MTU.
   
       Default value: ``<``
   :type comparator: comparator

.. py:class:: interfaceProperties(*, excludeShutInterfaces, interfaces, nodes, properties, question_name, exclusions)

   Returns configuration properties of interfaces.
   
   
   :param excludeShutInterfaces: Exclude interfaces that are shutdown.
   :type excludeShutInterfaces: boolean
   :param interfaces: Include interfaces matching this regex.
   :type interfaces: javaRegex
   :param nodes: Include nodes matching this name or regex.
   :type nodes: nodeSpec
   :param properties: Include properties matching this regex.
   :type properties: interfacePropertySpec

.. py:class:: ipOwners(*, duplicatesOnly, question_name, exclusions)

   Returns the mapping of IP address, interface, node and VRF for all devices in the snapshot.
   
   
   :param duplicatesOnly: *Required.* Restrict output to only IP addresses that are duplicated (configured on a different node or VRF) in the snapshot.
   :type duplicatesOnly: boolean

.. py:class:: ipsecSessionStatus(*, nodes, remoteNodes, status, question_name, exclusions)

   Returns the status of configured IPSec sessions.
   
   
   :param nodes: Include sessions whose first node matches this name or regex.
   :type nodes: nodeSpec
   :param remoteNodes: Include sessions whose second node matches this name or regex.
   :type remoteNodes: nodeSpec
   :param status: Only include IPSec sessions for which status matches this regex.
   :type status: javaRegex

.. py:class:: multipathConsistency(*, headers, maxTraces, pathConstraints, question_name, exclusions)

   Validate multipath consistency.
   
   Finds flows that are treated differently by different paths in the presence of multipath routing.
   
   
   :param headers: Packet header constraints.
   :type headers: headerConstraint
   :param maxTraces: Limit the number of traces returned.
   :type maxTraces: integer
   :param pathConstraints: Constraint the path a flow can take (start/end/transit locations).
   :type pathConstraints: pathConstraint

.. py:class:: namedStructures(*, nodes, properties, question_name, exclusions)

   Return named structure definitions.
   
   
   :param nodes: Include nodes matching this name or regex.
   :type nodes: nodeSpec
   :param properties: Include properties matching this regex.
   :type properties: namedStructureSpec

.. py:class:: neighbors(*, neighborTypes, nodes, remoteNodes, roleDimension, style, question_name, exclusions)

   Lists neighbor relationships in the snapshot.
   
   Lists neighbor relationships of the specified type (layer3, eBGP, iBGP, ospf, etc.).
   
   
   :param nodes: *Required.* Include neighbors whose first node matches this name or regex.
   
       Default value: ``.*``
   :type nodes: nodeSpec
   :param remoteNodes: *Required.* Include neighbors whose second node matches this name or regex.
   
       Default value: ``.*``
   :type remoteNodes: nodeSpec
   :param style: *Required.* String indicating the style of information requested about each neighbor.
       Allowed values:
   
       * role
       * summary
       * verbose
   
       Default value: ``summary``
   :type style: string
   :param neighborTypes: Types of neighbor relationships to include.
       Allowed values:
   
       * ebgp
       * eigrp
       * ibgp
       * layer1
       * layer2
       * layer3
       * ospf
       * rip
   :type neighborTypes: string
   :param roleDimension: Role dimension to run the question on.
   :type roleDimension: string

.. py:class:: nodeProperties(*, nodes, properties, question_name, exclusions)

   Return configuration properties of nodes.
   
   
   :param nodes: Include nodes matching this name or regex.
   :type nodes: nodeSpec
   :param properties: Include properties matching this regex.
   :type properties: nodePropertySpec

.. py:class:: nodes(*, nodeTypes, nodes, summary, question_name, exclusions)

   Lists configuration attributes of nodes in the network.
   
   Returns a JSON dictionary with all (or summary) of the configuration parameters that are stored in the vendor independent data-model.
   
   
   :param nodes: *Required.* Include nodes matching this name or regex.
   
       Default value: ``.*``
   :type nodes: nodeSpec
   :param summary: *Required.* Whether to provide only summary information about each node rather than the full data model.
   
       Default value: ``True``
   :type summary: boolean
   :param nodeTypes: Include nodes of the specified types.
   :type nodeTypes: string

.. py:class:: ospfProperties(*, nodes, properties, question_name, exclusions)

   Return configuration parameters for OSPF routing processes.
   
   
   :param nodes: Include nodes matching this name or regex.
   :type nodes: nodeSpec
   :param properties: Include properties matching this regex.
   :type properties: ospfPropertySpec

.. py:class:: parseWarning(*, question_name, exclusions)

   Return a table of the Batfish warnings that occurred parsing this snapshot.

.. py:class:: prefixTracer(*, nodes, prefix, question_name, exclusions)

   Trace prefix propagation through the network.
   
   
   :param nodes: Include prefix tracing information for nodes matching this name or regex.
   :type nodes: nodeSpec
   :param prefix: The prefix to trace. Expected format is A.B.C.D/Y.
   :type prefix: prefix

.. py:class:: reachability(*, actions, headers, ignoreFilters, maxTraces, pathConstraints, question_name, exclusions)

   Find flows that match the ingress and egress location, src and dest ip address and disposition constraints, as described by the input specifiers.
   
   
   :param actions: Only return flows for which the disposition is from this set.
   
       Default value: ``success``
   :type actions: dispositionSpec
   :param headers: Packet header constraints.
   :type headers: headerConstraint
   :param ignoreFilters: Do not apply filters/ACLs during analysis.
   :type ignoreFilters: boolean
   :param maxTraces: Limit the number of traces returned.
   :type maxTraces: integer
   :param pathConstraints: Constraint the path a flow can take (start/end/transit locations).
   :type pathConstraints: pathConstraint

.. py:class:: referencedStructures(*, names, nodes, types, question_name, exclusions)

   Lists the references in configuration files to vendor-specific structures.
   
   Lists the references in configuration files to vendor-specific structures, along with the line number, the name and the type of the structure referenced, and configuration context in which each reference occurs.
   
   
   :param names: Include structures whose name matches this string or regex.
   
       Default value: ``.*``
   :type names: javaRegex
   :param nodes: Include files used to generate nodes whose name matches this name or regex.
   
       Default value: ``.*``
   :type nodes: nodeSpec
   :param types: Include structures whose vendor-specific type matches this string or regex.
   
       Default value: ``.*``
   :type types: javaRegex

.. py:class:: resolveFilterSpecifier(*, filters, nodes, question_name, exclusions)

   Show the resolved values for filter specifier.
   
   
   :param filters: Input to the FilterSpecifier.
   :type filters: string
   :param nodes: Input to the NodeSpecifier.
   :type nodes: string

.. py:class:: resolveInterfaceSpecifier(*, interfaces, nodes, question_name, exclusions)

   Show the resolved values for interface specifier.
   
   
   :param interfaces: Input to the interfaceSpecifier.
   :type interfaces: string
   :param nodes: Input to the NodeSpecifier.
   :type nodes: string

.. py:class:: resolveIpSpecifier(*, ips, question_name, exclusions)

   Show the resolved values for IP specifier.
   
   
   :param ips: Input to the IpSpaceSpecifier.
   
       Default value: ``0.0.0.0/0``
   :type ips: string

.. py:class:: resolveIpsOfLocationSpecifier(*, locations, question_name, exclusions)

   Show IPs that are auto-assigned to locations.
   
   
   :param locations: Input to the LocationSpecifier.
   :type locations: string

.. py:class:: resolveLocationSpecifier(*, locations, question_name, exclusions)

   Show the resolved values for location specifier.
   
   
   :param locations: Input to the LocationSpecifier.
   :type locations: string

.. py:class:: resolveNodeSpecifier(*, nodes, question_name, exclusions)

   Show the resolved values for node specifier.
   
   
   :param nodes: Input to the NodeSpecifier.
   :type nodes: string

.. py:class:: routes(*, network, nodes, protocols, rib, vrfs, question_name, exclusions)

   Show routing tables.
   
   Return routes for the specified RIB for specified VRF for specified node(s).
   
   
   :param nodes: *Required.* Examine routes on nodes matching this name or regex.
   
       Default value: ``.*``
   :type nodes: nodeSpec
   :param protocols: *Required.* Examine routes for protocols matching this name or regex.
   
       Default value: ``.*``
   :type protocols: javaRegex
   :param vrfs: *Required.* Examine routes on VRFs matching this name or regex.
   
       Default value: ``.*``
   :type vrfs: javaRegex
   :param network: Examine routes for networks matching this prefix.
   :type network: prefix
   :param rib: Only return routes from a given protocol RIB.
       Allowed values:
   
       * main
       * bgp
       * bgpmp
   :type rib: string

.. py:class:: searchFilters(*, action, explain, filters, headers, invertSearch, nodes, startLocation, question_name, exclusions)

   Find flows for which a filter takes a particular behavior.
   
   This question searches for flows for which a filter (access control list) has a particular behavior. The behaviors can be: that the filter permits the flow (permit), that it denies the flow (deny), or that the flow is matched by a particular line (matchLine <lineNumber>). Filters are selected using node and filter specifiers, which might match multiple filters. In this case, a (possibly different) flow will be found for each filter.
   
   
   :param action: The behavior that you want evaluated. Options are: permit|deny|matchLine <line number>. Only one option should be selected.
   :type action: string
   :param explain: Include a description of the flow space matching the query.
   :type explain: boolean
   :param filters: Only evaluate filters that match this regex.
   :type filters: javaRegex
   :param headers: Packet header constraints on the flows being searched.
   :type headers: headerConstraint
   :param invertSearch: Search for packet headers outside the specified headerspace, rather than inside the space.
   :type invertSearch: boolean
   :param nodes: Only evaluate filters present on nodes matching this regex.
   :type nodes: string
   :param startLocation: Only consider specified locations as possible sources.
   :type startLocation: string

.. py:class:: testFilters(*, filters, headers, nodes, startLocation, question_name, exclusions)

   Evaluate the processing of a flow by a given filter/ACL.
   
   Find how the specified flow is processed through the specified filters/ACLs.
   
   
   :param filters: *Required.* Only consider filters that match this regular expression.
   
       Default value: ``.*``
   :type filters: javaRegex
   :param headers: *Required.* Packet header constraints.
   :type headers: headerConstraint
   :param nodes: *Required.* Only examine filters on nodes matching this name or regex.
   
       Default value: ``.*``
   :type nodes: nodeSpec
   :param startLocation: Location to start tracing from.
   :type startLocation: string

.. py:class:: traceroute(*, headers, ignoreFilters, maxTraces, startLocation, question_name, exclusions)

   Trace the path(s) for the specified flow.
   
   This question performs a virtual traceroute in the network from a starting node. A destination IP and ingress (source) node must be specified. Other IP headers are given default values if unspecified.
   Unlike a real traceroute, this traceroute is directional. That is, for it to succeed, the reverse connectivity is not needed. This feature can help debug connectivity issues by decoupling the two directions.
   
   
   :param headers: *Required.* Packet header constraints.
   :type headers: headerConstraint
   :param startLocation: *Required.* Location (node and interface combination) to start tracing from.
   :type startLocation: string
   :param ignoreFilters: If set, filters/ACLs encountered along the path are ignored.
   :type ignoreFilters: boolean
   :param maxTraces: Limit the number of traces returned.
   :type maxTraces: integer

.. py:class:: undefinedReferences(*, nodes, question_name, exclusions)

   Identify undefined references in configuration.
   
   This question finds configurations that have references to named structures (e.g., ACLs) that are not defined. Such occurrences indicate errors and can have serious consequences in some cases.
   
   
   :param nodes: *Required.* Look for undefined references on nodes matching this name or regex.
   
       Default value: ``.*``
   :type nodes: nodeSpec

.. py:class:: unusedStructures(*, nodes, question_name, exclusions)

   Return nodes with structures such as ACLs, routemaps, etc. that are defined but not used.
   
   Return nodes with structures such as ACLs, routes, etc. that are defined but not used. This may represent a bug in the configuration, which may have occurred because a final step in a template or MOP was not completed. Or it could be harmless extra configuration generated from a master template that is not meant to be used on those nodes.
   
   
   :param nodes: *Required.* Look for unused structures on nodes matching this name or regex.
   
       Default value: ``.*``
   :type nodes: nodeSpec

.. py:class:: viModel(*, question_name, exclusions)

   Lists configuration attributes of nodes and edges in the network.
   
   Returns a JSON dictionary with all of the configuration parameters and neighbor relations stored in the vendor independent data-model.

